//
//  AppChainTests.swift
//  NervosTests
//
//  Created by Yate Fulham on 2018/08/10.
//  Copyright Â© 2018 Cryptape. All rights reserved.
//

import XCTest
import BigInt
@testable import Nervos

class AppChainTests: XCTestCase {
    func testPeerCount() {
        let result = nervos.appChain.peerCount()
        switch result {
        case .success(let count):
            XCTAssertTrue(count >= 0)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testBlockNumber() {
        let result = nervos.appChain.blockNumber()
        switch result {
        case .success(let blockNumber):
            XCTAssertTrue(blockNumber > 100)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testSendRawTransaction() {
        guard case .success(let currentBlock) = nervos.appChain.blockNumber() else { return XCTFail() }
        guard case .success(let metaData) = nervos.appChain.getMetaData() else { return XCTFail() }

        let privateKey = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
        let tx = NervosTransaction(
            to: Address("0x0000000000000000000000000000000000000000")!,
            nonce: UUID().uuidString,
            data: Data.fromHex("6060604052341561000f57600080fd5b5b60646000819055507f8fb1356be6b2a4e49ee94447eb9dcb8783f51c41dcddfe7919f945017d163bf3336064604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b610178806100956000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146100495780636d4ce63c1461006c575b600080fd5b341561005457600080fd5b61006a6004808035906020019091905050610095565b005b341561007757600080fd5b61007f610142565b6040518082815260200191505060405180910390f35b7fc6d8c0af6d21f291e7c359603aa97e0ed500f04db6e983b9fce75a91c6b8da6b816040518082815260200191505060405180910390a1806000819055507ffd28ec3ec2555238d8ad6f9faf3e4cd10e574ce7e7ef28b73caa53f9512f65b93382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b50565b6000805490505b905600a165627a7a723058207fbd8b51e2ecdeb2425f642d6602a4ff030351102fd7afbed80318e61fa462670029")!,
            validUntilBlock: currentBlock + 88,
            chainId: metaData.chainId
        )
        guard let signed = try? NervosTransactionSigner.sign(transaction: tx, with: privateKey) else {
            return XCTFail("Sign tx failed")
        }

        let result = nervos.appChain.sendRawTransaction(signedTx: signed)
        switch result {
        case .success(let result):
            XCTAssertEqual(32, result.hash.count)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetBlockByHash() {
        let hash = "0x3b19e0eeaf3b844c77a9dbb43628cf16007790f370e51281f12b10ab3a1ef225"
        let result = nervos.appChain.getBlockByHash(hash: hash, fullTransactions: true)
        switch result {
        case .success(let block):
            XCTAssertEqual(block.hash.toHexString().addHexPrefix(), hash)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetBlockByNumber() {
        let number = BigUInt(1265130)
        let hash = "0x3b19e0eeaf3b844c77a9dbb43628cf16007790f370e51281f12b10ab3a1ef225"
        let result = nervos.appChain.getBlockByNumber(number: number, fullTransactions: true)
        switch result {
        case .success(let block):
            XCTAssertEqual(block.hash.toHexString().addHexPrefix(), hash)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetTransactionReceipt() {
        let result = nervos.appChain.getTransactionReceipt(txhash: "0x9825e6ac8e0872fe0aeec5da13516d506f5e86373e61f2ed77fc171e87e8c010")
        switch result {
        case .success(let receipt):
            XCTAssertEqual(receipt.blockHash.toHexString().addHexPrefix(), "0xd279ab329dbcbe41e236cfa26d9268239b7da5360ef19e0c0f85d622764aa932")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetLogs() {
        var filter = Filter()
        filter.fromBlock = "0x0"
        filter.topics = [["0xe4af93ca7e370881e6f1b57272e42a3d851d3cc6d951b4f4d2e7a963914468a2", "0xa84557f35aab907f9be7974487619dd4c05be1430bf704d0c274a7b3efa50d5a", "0x00000000000000000000000000000000000000000000000000000165365f092d"]]
        let result = nervos.appChain.getLogs(filter: filter)
        switch result {
        case .success(let logs):
            XCTAssertTrue(logs.count >= 90)
            let log = logs.first { $0.blockNumber == BigUInt(983996) }!
            XCTAssertEqual(log.blockHash.toHexString().addHexPrefix(), "0xf85fc692b28dec5f430ac95722c943ded7ed0f138058b22b9e525e4e37207539")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testCall() {
        let request = CallRequest(from: "0x46a23e25df9a0f6c18729dda9ad1af3b6a131160", to: "0x6fc32e7bdcb8040c4f587c3e9e6cfcee4025ea58", data: "0x9507d39a000000000000000000000000000000000000000000000000000001653656eae7")
        let result = nervos.appChain.call(request: request)
        switch result {
        case .success(let data):
            XCTAssertEqual(data, "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetTransaction() {
        let txhash = "0xa73316ce4c692b046c02521c45104fa486aba484e665bd1c43e8e7495442dfea"
        let result = nervos.appChain.getTransaction(txhash: txhash)
        switch result {
        case .success(let tx):
            XCTAssertEqual(tx.hash.toHexString().addHexPrefix(), txhash)
            XCTAssertEqual(tx.unsignedTransaction?.sender.address, "0xb531ef3178998dbb97518468ddfec2867346bc63")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetTransactionCountByBlockNumber() {
        let result = nervos.appChain.getTransactionCount(address: "0x4b5ae4567ad5d9fb92bc9afd6a657e6fa13a2523", blockNumber: "0xf793f")
        switch result {
        case .success(let count):
            XCTAssertEqual(count, 83)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetTransactionCountLatest() {
        let result = nervos.appChain.getTransactionCount(address: "0x4b5ae4567ad5d9fb92bc9afd6a657e6fa13a2523", blockNumber: "latest")
        switch result {
        case .success(let count):
            XCTAssertTrue(count >= 149)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetTransactionCountByAddress() {
        let address = Address("0x4b5ae4567ad5d9fb92bc9afd6a657e6fa13a2523")!
        let result = nervos.appChain.getTransactionCount(address: address, blockNumber: "latest")
        switch result {
        case .success(let count):
            XCTAssertTrue(count >= 149)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetCode() {
        let result = nervos.appChain.getCode(address: "0xd8fb3e5600a682f340761280ccf9d29c7ee114a7", blockNumber: "latest")
        switch result {
        case .success(let code):
            XCTAssertEqual(code, "0x608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e578063095ea7b31461012e57806318160ddd1461019357806323b872dd146101be578063313ce5671461024357806370a082311461027457806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e146103c0575b600080fd5b3480156100aa57600080fd5b506100b3610437565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610179600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104d5565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a86105c7565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b50610229600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105cd565b604051808215151515815260200191505060405180910390f35b34801561024f57600080fd5b50610258610839565b604051808260ff1660ff16815260200191505060405180910390f35b34801561028057600080fd5b506102b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061084c565b6040518082815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610895565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610320578082015181840152602081019050610305565b50505050905090810190601f16801561034d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036757600080fd5b506103a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610933565b604051808215151515815260200191505060405180910390f35b3480156103cc57600080fd5b50610421600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b3d565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561069a575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156106a557600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092b5780601f106109005761010080835404028352916020019161092b565b820191906000526020600020905b81548152906001019060200180831161090e57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610a035750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1515610a0e57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614151515610a3457600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a72305820a9bfd136e48d962d0d55e57341b48830d0523279d8fa83701eda537a3c06f86d0029")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetAbi() {
        let result = nervos.appChain.getAbi(address: "0xb93b22a67D724A3487C2BD83a4aaac66F1B7C882", blockNumber: "latest")
        switch result {
        case .success(let code):
            XCTAssertEqual(code, "0x5b7b22636f6e7374616e74223a747275652c22696e70757473223a5b7b226e616d65223a22222c2274797065223a2275696e74323536227d5d2c226e616d65223a22616c6c6f7765644d656d62657273222c226f757470757473223a5b7b226e616d65223a22222c2274797065223a2261646472657373227d5d2c2270617961626c65223a66616c73652c2273746174654d75746162696c697479223a2276696577222c2274797065223a2266756e6374696f6e222c227369676e6174757265223a2230783164353563336631227d2c7b22636f6e7374616e74223a66616c73652c22696e70757473223a5b7b226e616d65223a2266696c65222c2274797065223a22737472696e67227d2c7b226e616d65223a2275726c73222c2274797065223a22737472696e67227d5d2c226e616d65223a2261646446696c65222c226f757470757473223a5b7b226e616d65223a2273756363657373222c2274797065223a22626f6f6c227d5d2c2270617961626c65223a66616c73652c2273746174654d75746162696c697479223a226e6f6e70617961626c65222c2274797065223a2266756e6374696f6e222c227369676e6174757265223a2230783234386266633362227d2c7b22636f6e7374616e74223a747275652c22696e70757473223a5b7b226e616d65223a2266696c65222c2274797065223a22737472696e67227d5d2c226e616d65223a2267657446696c6555726c73222c226f757470757473223a5b7b226e616d65223a2275726c73222c2274797065223a22737472696e67227d5d2c2270617961626c65223a66616c73652c2273746174654d75746162696c697479223a2276696577222c2274797065223a2266756e6374696f6e222c227369676e6174757265223a2230783831363234353763227d2c7b22636f6e7374616e74223a747275652c22696e70757473223a5b5d2c226e616d65223a226f776e6572222c226f757470757473223a5b7b226e616d65223a22222c2274797065223a2261646472657373227d5d2c2270617961626c65223a66616c73652c2273746174654d75746162696c697479223a2276696577222c2274797065223a2266756e6374696f6e222c227369676e6174757265223a2230783864613563623562227d2c7b22636f6e7374616e74223a66616c73652c22696e70757473223a5b7b226e616d65223a2266696c65222c2274797065223a22737472696e67227d5d2c226e616d65223a2272656d6f766546696c65222c226f757470757473223a5b7b226e616d65223a2273756363657373222c2274797065223a22626f6f6c227d5d2c2270617961626c65223a66616c73652c2273746174654d75746162696c697479223a226e6f6e70617961626c65222c2274797065223a2266756e6374696f6e222c227369676e6174757265223a2230786631616665303464227d2c7b22636f6e7374616e74223a747275652c22696e70757473223a5b7b226e616d65223a22222c2274797065223a2275696e74323536227d5d2c226e616d65223a2266696c6573222c226f757470757473223a5b7b226e616d65223a22222c2274797065223a2262797465733332227d5d2c2270617961626c65223a66616c73652c2273746174654d75746162696c697479223a2276696577222c2274797065223a2266756e6374696f6e222c227369676e6174757265223a2230786634633731346234227d2c7b22696e70757473223a5b7b226e616d65223a225f616c6c6f7765644d656d62657273222c2274797065223a22616464726573735b5d227d5d2c2270617961626c65223a66616c73652c2273746174654d75746162696c697479223a226e6f6e70617961626c65222c2274797065223a22636f6e7374727563746f72222c227369676e6174757265223a22636f6e7374727563746f72227d5d")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetBalance() {
        let result = nervos.appChain.getBalance(address: "0x4b5ae4567ad5d9fb92bc9afd6a657e6fa13a2523", blockNumber: "0x10837f")
        switch result {
        case .success(let balance):
            XCTAssertEqual(balance.toHexString().addHexPrefix(), "0x1000000043c33c19375634fd33b")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testNewFilter() {
        var filter = Filter()
        filter.fromBlock = "0x0"
        filter.topics = [["0xe4af93ca7e370881e6f1b57272e42a3d851d3cc6d951b4f4d2e7a963914468a2", "0xa84557f35aab907f9be7974487619dd4c05be1430bf704d0c274a7b3efa50d5a", "0x00000000000000000000000000000000000000000000000000000165365f092d"]]
        let result = nervos.appChain.newFilter(filter: filter)
        switch result {
        case .success(let id):
            XCTAssertTrue(id > 0)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testNewBlockFilter() {
        let result = nervos.appChain.newBlockFilter()
        switch result {
        case .success(let id):
            XCTAssertTrue(id > 0)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testUninstallFilter() {
        guard case .success(let filterID ) = nervos.appChain.newBlockFilter() else { return XCTFail() }
        var result = nervos.appChain.uninstallFilter(filterID: filterID)
        switch result {
        case .success(let uninstalled):
            XCTAssertTrue(uninstalled)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }

        result = nervos.appChain.uninstallFilter(filterID: filterID)
        switch result {
        case .success(let uninstalled):
            XCTAssertFalse(uninstalled)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetFilterChanges() {
        let result = nervos.appChain.getFilterChanges(filterID: 1)
        switch result {
        case .success(let changes):
            XCTAssertTrue(changes.count >= 0)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetFilterLogs() {
        let result = nervos.appChain.getFilterLogs(filterID: 1)
        switch result {
        case .success(let changes):
            XCTAssertTrue(changes.count >= 0)
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetTransactionProof() {
        let result = nervos.appChain.getTransactionProof(txhash: "0x9825e6ac8e0872fe0aeec5da13516d506f5e86373e61f2ed77fc171e87e8c010")
        switch result {
        case .success(let proof):
            XCTAssertEqual(proof, "0xf90becf8ca8080830f424094e82c84b9c7ff19a41ed98807b2174dc6a5cce31c108083132fed0180b841b30b8a9a4e7e86f52c22be113695d9e7854c7aa963f9f1c041e2402fa639a9527cb8923d4e59f5f967e04a112b630910591f28ad95a851c837c99faaf52f58060180a09825e6ac8e0872fe0aeec5da13516d506f5e86373e61f2ed77fc171e87e8c010b840a706ad8f73115f90500266f273f7571df9429a4cfb4bbfbcd825227202dabad1ba3d35c73aec698af852b327ba1c24e11758936bb6322fe93d7469b182f66631f9012b64b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0c0830130dba09825e6ac8e0872fe0aeec5da13516d506f5e86373e61f2ed77fc171e87e8c010c0f90408a0c84f5fabb992a6388964df23307d64d7be0f84520b8fab007fcb70716a61bad1a08abbd21ad3a4bc9d09720089f68141f5bc9d9a62c264b230a18dd674cb5a35c2a09825e6ac8e0872fe0aeec5da13516d506f5e86373e61f2ed77fc171e87e8c010a081dd9053baa9519f286b52b9f2864895cd5076ca9521c9bf7e3122d386ec6666bf9788ffffffffffffffff64860165afe05a8080b902530ace044200000000000000307830343862356635633933623661613936333366393536643463353838373337323636643830616235396662656632346535653730623166623738373261373935962f130000000000020000000000000004000000000000002a0000000000000030786565303162396261393736373165386131383931653835623230366234393966313036383232613141000000000000005d5fbebebe4594dd14d022413276a67c856474bc00d9fcdaee37dc1241365c2b62f6a648279454504d6cec837bee63e427afee257f693f03728e37d3e658374c002a0000000000000030783331303432643466373636326364646638646564353232396462336335653733303238373565313041000000000000001f3a4d72e0ce2bd4dd68f838de3cba5ba7496188d5627ee38616018ae63737334c98e61efd204d22806fa8f43a9b0e01c32df12f1f330aff6a09e0b6e1fa5952012a000000000000003078343836626236383863386432393035366264376638376332363733333034386230613661626461364100000000000000680ee5f50a29fae939a63afa99f4fe626337e8ce22ce6f68fcb8691c4dd955710c5cfba3540d0546c0a66914f346115c668bd956ec6b2e5dee51190e596ebe1e002a00000000000000307837316230323865343963366634316161613734393332643730336337303765636361366437333265410000000000000041b7d5cb027c1e01767c63919eea91ff2d918d70aaf4e4aeb1f4cb64ab3ed1535556ad7a3608b8017faf1554646fff5afedde58504aea3beb40efa3d6fb07b580110029431042d4f7662cddf8ded5229db3c5e7302875e10f9038da0d279ab329dbcbe41e236cfa26d9268239b7da5360ef19e0c0f85d622764aa932a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bf9888ffffffffffffffff80860165afe0662680b901d80ad3034200000000000000307865393331323630666530663462333232663966313862663434373733333437653336643333393238316330383738633563383237326537326461616466396532972f130000000000000000000000000003000000000000002a00000000000000307837316230323865343963366634316161613734393332643730336337303765636361366437333265410000000000000071cb03044007ce8e55641941087391262ce953e89952723df7ff8997effb307b5dab1f6b57de41bb7e6ba2594fa28c59ce6b708f6ecdd88b25d5fdf9cc962fbc012a0000000000000030783438366262363838633864323930353662643766383763323637333330343862306136616264613641000000000000000efd385b9b6f8c724b41d2fafd43829d9dfbb2d5c56cac021935bc96d9f2a2235080632e03b9bfae46b478bd10a3f22e30aa0aeecd2f98e6f12e1adfb85b45ba002a000000000000003078333130343264346637363632636464663864656435323239646233633565373330323837356531304100000000000000714f567f62a5f7f5421e2b72a58669ed141dc67250b66ee596ea9e83798c0f7245bba81a29d356b95863d76c53b4a51c496ed7aa9dbfd0a41fffa088d7d75f520110029471b028e49c6f41aaa74932d703c707ecca6d732eb902530ace044200000000000000307866313263363031396464303664316339623535663039633135303534383430633338626465656434313034613835316532346664376365323463363633373538982f130000000000000000000000000004000000000000002a0000000000000030783731623032386534396336663431616161373439333264373033633730376563636136643733326541000000000000008b58c8ce4d834b257b53646558e699fd090b1dab11a5fcce10ea45985477b076558d19e8e7c7a7560a3df1d3d7abcb265fee6b13a3434cf272a4ec8c9611098f012a0000000000000030783438366262363838633864323930353662643766383763323637333330343862306136616264613641000000000000006ca876b484b404422457b83c5b522ccaf6c7707c678486bf5a47590809896d115fdfc146995de7bfe47e4e0cf2473f94f6685b455f1666ab22a66059229e226c002a00000000000000307865653031623962613937363731653861313839316538356232303662343939663130363832326131410000000000000059432ea7681343f4d18b2775674a9839a1bdb8e38764da56746f120b29d307be6e786dcec2ce9d0b19955a64a082d01f2b782eb7ecb33500c81d749cae0d13b6012a000000000000003078333130343264346637363632636464663864656435323239646233633565373330323837356531304100000000000000ab4808fdb68dede72bef058ce181cb23997f77c9323a24da1d00d4b855c9f07732e5ddc4964d6bc1ef59ec0a11720b8c051b108899876b0124d2434d3db7ca52011002")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    func testGetMetaData() {
        let result = nervos.appChain.getMetaData(blockNumber: "latest")
        switch result {
        case .success(let metaData):
            XCTAssertEqual(metaData.chainId, 1)
            XCTAssertEqual(metaData.chainName, "test-chain")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    // TODO: getBlockHeader doesn't seem to be online yet.
    func xtestGetBlockHeader() {
        let result = nervos.appChain.getBlockHeader(blockNumber: "0x934b9")
        switch result {
        case .success(let blockHeader):
            XCTAssertEqual(blockHeader, "")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }

    // TODO: getStateProof doesn't seem to be online yet.
    func xtestGetStateProof() {
        let result = nervos.appChain.getStateProof(address: "0xad54ae137c6c39fa413fa1da7db6463e3ae45664", key: "0xa40893b0c723e74515c3164afb5b2a310dd5854fac8823bfbffa1d912e98423e", blockNumber: "16")
        switch result {
        case .success(let proof):
            XCTAssertEqual(proof, "0xf902a594ad54ae137c6c39fa413fa1da7db6463e3ae45664f901eeb90114f9011180a088e2efeed0516020141cbbba149711e0ce67634363097a441520704040aa8dd9a0479ca451cdb343dd2eedbf313e805983e87c0f4f16e9c14f28ab3f1750eb1b8e80a0dd94e00536c62d8c801b8496fb0834ab7225954bac452a7d14c0f4a35df81074a07c689f1111314c391b164c458f902366bb18b90a53d9000a1ffd41abc96373d380808080a0b219eebc746ca232aa4a839213565d1932b4b952c93c5aa585e226ac5412d836a0b758264786a8fb6eaa6f7f2185a3f38111de3c532517ef4e46b99b80e4866d27a093ddedf515207b9a68b50f5f344aae23e709316d96345b146746ae2e511893178080a03b5530655278a731d4c895c92359fb217c64f9fde0c6945339863638396627f480b853f851808080808080808080808080a0d7a0fd35748eceb8fc8040517033416adcfb5523f4abe9789b749700c36b4ba5a0e4fe51db54afdd475e2c50888623567385f2b3694ffdb33c92a1bc782de44be7808080b880f87e942054ae137c6c39fa413fa1da7db6463e3ae45664b867f8658080a0a860517f2f639d5c3e9e8a8c04ef6c71018e18cd0881099776a73653973f90a4a00f1cd9fb6dda499878b60cdb90cf0acf25424afb5583131e4dff5e512cd64a4da0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0a40893b0c723e74515c3164afb5b2a310dd5854fac8823bfbffa1d912e98423ef87cb853f851a02c839c2946385ef0a820355b6969c49c97bdaa6a19b02384bcc39c992046d6b9808080808080808080a051be428c087e3544a47f273c93ffcb9999267593d3b36042a9d3e96ed068fceb808080808080a6e5a0340893b0c723e74515c3164afb5b2a310dd5854fac8823bfbffa1d912e98423e83827a02")
        case .failure(let error):
            XCTFail(error.localizedDescription)
        }
    }
}

extension AppChainTests {
    func xtestInvalidNode() {
        let result = nobody.appChain.peerCount()
        switch result {
        case .success(let count):
            XCTFail("Should not get peerCount \(count) from an invalid nervos node")
        case .failure(let error):
            XCTAssertNotNil(error)
        }
    }
}
